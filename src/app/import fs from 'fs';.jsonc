import fs from 'fs';
import path from 'path';
import { JSONSchema7 } from 'json-schema';
import Ajv from 'ajv';

describe('tsconfig.json validation', () => {
  let tsconfigContent: any;
  const ajv = new Ajv();

  beforeAll(() => {
    tsconfigContent = JSON.parse(
      fs.readFileSync(path.resolve(process.cwd(), 'tsconfig.json'), 'utf8')
    );
  });

  const tsconfigSchema: JSONSchema7 = {
    type: 'object',
    required: ['compilerOptions', 'include', 'exclude'],
    properties: {
      compilerOptions: {
        type: 'object',
        required: [
          'baseUrl',
          'paths',
          'target',
          'lib',
          'jsx',
          'moduleResolution'
        ],
        properties: {
          baseUrl: { type: 'string' },
          paths: { type: 'object' },
          target: { type: 'string' },
          lib: { type: 'array', items: { type: 'string' } },
          jsx: { type: 'string' }
        }
      },
      include: { type: 'array', items: { type: 'string' } },
      exclude: { type: 'array', items: { type: 'string' } }
    }
  };

  test('should have valid JSON schema structure', () => {
    const validate = ajv.compile(tsconfigSchema);
    const isValid = validate(tsconfigContent);
    expect(isValid).toBeTruthy();
  });

  test('should have correct baseUrl configuration', () => {
    expect(tsconfigContent.compilerOptions.baseUrl).toBe('.');
  });

  test('should have proper path aliases configured', () => {
    expect(tsconfigContent.compilerOptions.paths).toHaveProperty('@/*');
    expect(tsconfigContent.compilerOptions.paths['@/*']).toEqual(['./src/*']);
  });

  test('should include necessary lib dependencies', () => {
    const requiredLibs = ['dom', 'dom.iterable', 'esnext'];
    requiredLibs.forEach(lib => {
      expect(tsconfigContent.compilerOptions.lib).toContain(lib);
    });
  });

  test('should have correct module settings', () => {
    expect(tsconfigContent.compilerOptions.module).toBe('esnext');
    expect(tsconfigContent.compilerOptions.moduleResolution).toBe('bundler');
  });

  test('should have proper Next.js plugin configuration', () => {
    expect(tsconfigContent.compilerOptions.plugins).toHaveLength(1);
    expect(tsconfigContent.compilerOptions.plugins[0]).toEqual({ name: 'next' });
  });

  test('should include correct file patterns', () => {
    const expectedPatterns = [
      'next-env.d.ts',
      '**/*.ts',
      '**/*.tsx',
      '.next/types/**/*.ts'
    ];
    expect(tsconfigContent.include).toEqual(expectedPatterns);
  });

  test('should exclude node_modules', () => {
    expect(tsconfigContent.exclude).toContain('node_modules');
    expect(tsconfigContent.exclude).toHaveLength(1);
  });
});
